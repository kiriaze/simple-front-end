/* ============================================
	S I M P L E


 * The template is for rendering single's.
 *
 * @package     Simple
 * @version     1.0
 * @author      Constantine Kiriaze
 * @website     github.com/kiriaze/simple

	Browsers: ie8, ie10, ie11, FF, Safari, Chrome

	Dependancies :

		Variables below defined in _base.scss

			$container-class: 'foo';
			$column-class: 'bar';
			$gutter: 3%; // spacing between columns
			$max-columns: 6; //  @for loop class declarations
			breakpoint mixins

.columns-{percentage, double digit}
	.columns-70, .columns-30 = totaling to 100

.columns-{single digit number}
	.columns-1
	.columns-2, .columns-2
	.columns-4, .columns-4, .columns-4, .columns-4

============================================ */

//-------------------------------------------------------
// GRID SETTINGS
//-------------------------------------------------------

// this is the fixed gutter between columns
$gutter: 3% !default;
$docWidth: 100% !default;

// this sets your class names
$container-class: "row" !default;
$column-class: "columns" !default;
$max-columns: 12 !default;

// Grid check
$gridDebug: false !default;


//-------------------------------------------------------
// GRID FUNCTIONS
//-------------------------------------------------------

@function column-width($num, $width) {
	@return ( $width / $num );
}

@function third-width($num, $width) {
	@return $num * ( $width / 3 );
}


//-------------------------------------------------------
// GRID MIXINS
//-------------------------------------------------------

@mixin set-gutter($gutter) {
	@include breakpoint($small) {
		margin-left: -$gutter;
		margin-right: -$gutter;
		padding-left: $gutter;
	}
}

@mixin grid() {
	@include set-gutter($gutter);
	@include clearfix;
}

@mixin column() {
	float: left;
	width: 100%;
	box-sizing: border-box;
}

@mixin columns($num) {

	@include column();

	// Note: never wrap this with a breakpoint to allow it being wrapped in other styles.
	// e.g. #elem { @include breakpoint($small) { @include columns(2); } }

	@if ( round($num) == $num ) {
		// if whole number for even # cols
		width: column-width($num, $docWidth) - $gutter;
	} @else {
		// for mixed width cols, data-columns=".3"
		width: ($num * $docWidth) - $gutter;
	}

	margin-right: $gutter;
}

@mixin third($num) {
	@include column();
	@include breakpoint($small) {
		width: third-width($num, $docWidth);
	}
}

// set the proportions you want to use
@mixin grid-setup() {

	@for $i from 1 through $max-columns {
		[data-columns='#{$i}'],
		.#{$column-class}-#{$i} {
			@include breakpoint($small) {
				@include columns($i);
			}
		}

	}

	// Percentages for mixed widths
	@for $i from 1 through 10 {
		[data-columns='.#{$i}'],
		.#{$column-class}-#{$i}0 {
			@include breakpoint($small) {
				@include columns($i/10);
			}
		}
	}

}


//-------------------------------------------------------
// CLASS AND DATA DELEGATIONS
//-------------------------------------------------------

[class~='#{$container-class}'],
[data-layout='grid'] {

	@include grid();

	@if( $gridDebug == true ) {
		background: $black; // testing purposes
	}

}

[class*='#{$column-class}-'] {
	@if( $gridDebug == true ) {
		background: $yellow; // testing purposes
		padding: 1.5rem 0;
		margin: 0.5rem 0;
		font-weight: 600;
		text-align: center;
	}
}

// find a way to reset the value of gutter to also apply to columns etc..
.xlarge-gutter {
	@include set-gutter($gutter*3);
}

.large-gutter {
	@include set-gutter($gutter*2);
}

.half-gutter {
	@include set-gutter($gutter/2);
}

.no-gutter {
	@include set-gutter(0);
}

.reset-gutter {
	@include set-gutter($gutter);
}

// Run grid
@include grid-setup();
