/* ============================================
	S I M P L E


 * The template is for rendering single's.
 *
 * @package     Simple
 * @version     1.0
 * @author      Constantine Kiriaze
 * @website     github.com/kiriaze/simple

	Browsers: ie8, ie10, ie11, FF, Safari, Chrome

	Dependancies :

		Variables below defined in _base.scss

			$container-class: 'foo';
			$column-class: 'bar';
			$gutter: 3%; // spacing between columns
			$max-columns: 6; //  @for loop class declarations
			breakpoint mixins

.columns-{percentage, double digit}
	.columns-70, .columns-30 = totaling to 100

.columns-{single digit number}
	.columns-1
	.columns-2, .columns-2
	.columns-4, .columns-4, .columns-4, .columns-4



differences between old/new
old:
	just works
		caveat
			mixing columns on site with different gutters
new:
	similar to bootstrap, gutter becomes the space between columns * 2,
	first and last column in rows are snug,
	and column classes need to be attached to parent containers; e.g. below, and style the elemnts within the columns classes
	<div class="container">
		<div class="row">
			<div class="columns-70">
				<article>
					Lorem ipsum dolor sit amet, consectetur adipisicing elit. Autem architecto ipsam dolores ea quas ut dolorem libero reprehenderit est quibusdam ex aperiam, distinctio natus impedit mollitia veniam repellendus commodi atque!
				</article>
			</div>
			<div class="columns-30">
				<aside>
					sidebar
				</aside>
			</div>
		</div>
	</div>

============================================ */

//-------------------------------------------------------
// GRID SETTINGS
//-------------------------------------------------------

// this is the fixed gutter between columns
$gutter: 3% !default;
$docWidth: 100% !default;

// this sets your class names
$container-class: "row" !default;
$column-class: "columns" !default;
$max-columns: 12 !default;

// Grid check
$gridDebug: false !default;


//-------------------------------------------------------
// GRID FUNCTIONS
//-------------------------------------------------------

@function column-width($num, $width) {
	@return ( $width / $num );
}

@function third-width($num, $width) {
	@return $num * ( $width / 3 );
}


//-------------------------------------------------------
// GRID MIXINS
//-------------------------------------------------------

@mixin set-gutter($gutter) {
	@include breakpoint($small) {
		// old
		margin-left: -$gutter;
		margin-right: -$gutter;
		padding-left: $gutter;

		// // new
		// margin-left:  ($gutter / -2);
		// margin-right: ($gutter / -2);

		@include clearfix();
	}
}

// Centered container element
@mixin container-fixed($gutter: $gutter) {
	position: relative;
    overflow: hidden;
	margin-right: auto;
	margin-left: auto;

	// new
	// padding-left:  ($gutter / 2);
	// padding-right: ($gutter / 2);

	@include clearfix();
}

@mixin grid( $display: float ) {

	box-sizing: border-box;

	@if( $display == 'ib' ) {
		font-size: 0px;
		text-align: justify;
		&:after {
			content: '';
			display: inline-block;
			width: 100%;
		}
	} @else {
		@include set-gutter($gutter);
	}
}

@mixin column() {
	box-sizing: border-box;
	width: 100%;
}

@mixin columns($num, $display: float, $gutter: $gutter) {

	@include column();

	// Note: never wrap this with a breakpoint to allow it being wrapped in other styles.
	// e.g. #elem { @include breakpoint($small) { @include columns(2); } }

	// old
	@if ( round($num) == $num ) {
		// if whole number for even # cols
		width: column-width($num, $docWidth) - $gutter;
	} @else {
		// for mixed width cols, data-columns=".3"
		width: ($num * $docWidth) - $gutter;
	}
	@if( $display == 'ib' ) {
		@extend %ib;
		font-size: initial;
	} @else {
		margin-right: $gutter;
		float: left;
	}

	// new
	// @if( $display == 'ib' ) {
	// 	@extend %ib;
	// 	font-size: initial;
	// 	@if ( round($num) == $num ) {
	// 		// if whole number for even # cols
	// 		width: column-width($num, $docWidth) - $gutter;
	// 	} @else {
	// 		// for mixed width cols, data-columns=".3"
	// 		width: ($num * $docWidth) - $gutter;
	// 	}
	// } @else {
	// 	float: left;

	// 	@if ( round($num) == $num ) {
	// 		// if whole number for even # cols
	// 		width: (strip-unit($docWidth / $num)) * 1%;
	// 	} @else {
	// 		// for mixed width cols, data-columns=".3"
	// 		width: ($num * $docWidth);
	// 	}
	// 	position: relative;
	// 	min-height: 1px;
	// 	padding-left:  ($gutter / 2);
	// 	padding-right: ($gutter / 2);
	// }
}

@mixin third($num) {
	@include column();
	@include breakpoint($small) {
		width: third-width($num, $docWidth);
	}
}

// set the proportions you want to use
@mixin grid-setup() {

	@for $i from 1 through $max-columns {
		[data-columns='#{$i}'],
		.#{$column-class}-#{$i} {
			@include breakpoint($small) {
				@include columns($i);
			}
		}

	}

	// Percentages for mixed widths
	@for $i from 1 through 10 {
		[data-columns='.#{$i}'],
		.#{$column-class}-#{$i}0 {
			@include breakpoint($small) {
				@include columns($i/10);
			}
		}
	}

}


//-------------------------------------------------------
// CLASS AND DATA DELEGATIONS
//-------------------------------------------------------
.container {

	@include container-fixed();

	// fluid grid, but fixed responsiveness - container fixedwidth with breakpoints
	@include breakpoint($small) {
		width: $small;
	}
	@include breakpoint($medium) {
		width: $medium;
	}
	@include breakpoint($large) {
		width: $large;
	}

}

[class~='#{$container-class}'],
[data-layout='grid'] {

	@include grid();

	@if( $gridDebug == true ) {
		background: $black; // testing purposes
	}

}

[class*='#{$column-class}-'] {
	@if( $gridDebug == true ) {
		background: $yellow; // testing purposes
		padding-top: 1.5rem;
		padding-bottom: 1.5rem;
		margin-top: 0.5rem;
		margin-bottom: 0.5rem;
		font-weight: 600;
		text-align: center;
	}
}

// find a way to reset the value of gutter to also apply to columns etc..
.xlarge-gutter {
	@include set-gutter($gutter*3);
}

.large-gutter {
	@include set-gutter($gutter*2);
}

.half-gutter {
	@include set-gutter($gutter/2);
}

.no-gutter {
	@include set-gutter(0);
}

.reset-gutter {
	@include set-gutter($gutter);
}

// Run grid
@include grid-setup();
